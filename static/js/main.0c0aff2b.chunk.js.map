{"version":3,"sources":["views/SettingsView.js","components/Statistics.js","views/MainView.js","components/Question.js","utils/randomNumbers.js","components/Answer.js","components/Results.js","utils/answers.js","views/GameView.js","App.js","serviceWorker.js","index.js"],"names":["SettingsView","Typography","id","gutterBottom","Slider","aria-labelledby","valueLabelDisplay","value","this","props","settings","numbersCount","step","min","max","onChange","event","handleSettingsChange","numbersMagnitude","delay","Button","variant","color","onClick","handleTabs","Component","useStyles","makeStyles","theme","createStyles","root","flexGrow","paper","padding","spacing","marginTop","marginBottom","textAlign","palette","text","secondary","Statistics","games","successful","classes","className","Paper","MainView","stats","Question","numbers","handleQuestionComplete","style","display","flexDirection","borderFillColor","seconds","onComplete","data-testid","fontSize","justifyContent","flexWrap","map","number","index","key","margin","createRandomNumbers","count","magnitude","result","i","push","createRandomNumber","alreadyExistingNumbers","Math","floor","random","pow","includes","Answer","state","userAnswer","handleInputChange","setState","target","handleKeyPress","handleAnswerComplete","preventDefault","TextField","autoFocus","size","onKeyPress","label","helperText","Check","Results","message","messageType","handleMoreButton","handleBackButton","Alert","severity","MAIN_TAB_INDEX","checkAnswer","correctNumbers","userNumbers","split","stringNumber","Number","parseInt","every","GameView","gameState","userInput","isAnswerCorrect","handleStatisticsUpdate","handleMore","TabPanel","children","other","role","hidden","Box","p","a11yProps","App","tabIndex","setTabIndex","handleTabIndexChange","newValue","name","newStats","AppBar","position","Tabs","aria-label","Tab","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.0c0aff2b.chunk.js","sourcesContent":["import React, {Component} from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\n\nexport default class SettingsView extends Component {\n  render() {\n    return <>\n      <Typography id=\"discrete-slider\" gutterBottom>\n        Количество чисел\n      </Typography>\n      <Slider\n        aria-labelledby=\"discrete-slider\"\n        valueLabelDisplay=\"auto\"\n        value={this.props.settings.numbersCount}\n        step={1}\n        min={1}\n        max={6}\n        onChange={(event, value) => this.props.handleSettingsChange(\"numbersCount\", value)}\n      />\n\n      <Typography id=\"discrete-slider\" gutterBottom>\n        Величина чисел\n      </Typography>\n      <Slider\n        aria-labelledby=\"discrete-slider\"\n        valueLabelDisplay=\"auto\"\n        value={this.props.settings.numbersMagnitude}\n        step={1}\n        min={1}\n        max={5}\n        onChange={(event, value) => this.props.handleSettingsChange(\"numbersMagnitude\", value)}\n      />\n\n      <Typography id=\"discrete-slider\" gutterBottom>\n        Время демонстрации\n      </Typography>\n      <Slider\n        aria-labelledby=\"discrete-slider\"\n        valueLabelDisplay=\"auto\"\n        value={this.props.settings.delay}\n        step={1}\n        min={5}\n        max={30}\n        onChange={(event, value) => this.props.handleSettingsChange(\"delay\", value)}\n      />\n\n      <Button variant=\"contained\" color=\"primary\" onClick={() => this.props.handleTabs(1)}>Играть!</Button>\n    </>;\n  }\n}\n","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n  })\n);\n\nconst Statistics = ({games, successful}) => {\n  const classes = useStyles();\n\n  return <div className={classes.root}>\n      <Paper className={classes.paper}>Всего сыграно игр: {games}</Paper>\n      <Paper className={classes.paper}>Правильных ответов: {successful}</Paper>\n    </div>;\n};\n\nexport default Statistics;\n","import React, {Component} from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Statistics from \"../components/Statistics\";\n\nexport default class MainView extends Component {\n  render() {\n    return (\n      <>\n        <h4>Игра на запоминание чисел</h4>\n        <p>\n          Вам будет предложено запомнить некоторые числа.\n          После этого нужно будет их воспроизвести,\n          не обязательно в том же порядке, за фиксированное время.\n        </p>\n        {this.props.stats.games > 0 && (\n          <Statistics {...this.props.stats}/>\n        )}\n        <Button variant=\"contained\" color=\"primary\" onClick={() => this.props.handleTabs(1)}>Играть!</Button>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport Countdown360 from \"react-countdown360\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst Question = ({numbers, delay, handleQuestionComplete}) => {\n  return <>\n    <div style={{display: \"flex\", flexDirection: \"row\", padding: \"10px\"}}>\n      <div>\n        <Countdown360\n          borderFillColor=\"#00ad00\"\n          seconds={delay}\n          onComplete={handleQuestionComplete}\n        />\n      </div>\n      <div style={{flexGrow: 1}}>\n        <div\n          data-testid=\"question-numbers\"\n          style={{display: \"flex\", flexDirection: \"row\", padding: \"10px\", fontSize: \"60px\", justifyContent: \"space-around\", flexWrap: \"wrap\"}}>\n          {numbers.map((number, index) => (<Paper key={index} style={{padding: \"10px\", margin: \"10px\"}}>{number}</Paper>))}\n        </div>\n      </div>\n    </div>\n    </>;\n};\n\nexport default Question;\n","export function createRandomNumbers(count, magnitude) {\n  const result = [];\n  for(let i = 0; i < count; i++) {\n    result.push(createRandomNumber(magnitude, result));\n  }\n  return result;\n}\n\nfunction createRandomNumber(magnitude, alreadyExistingNumbers = []) {\n  let number;\n  do {\n    number = Math.floor(Math.random() * Math.pow(10, magnitude) + 1);\n  } while (alreadyExistingNumbers.includes(number));\n  return number;\n}\n","import React, {Component} from \"react\";\nimport Countdown360 from \"react-countdown360\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport {Check} from \"@material-ui/icons\";\n\nclass Answer extends Component {\n  state = {\n    userAnswer: \"\"\n  };\n\n  handleInputChange = (event) => {\n    this.setState({\n      userAnswer: event.target.value\n    });\n  };\n\n  handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      this.handleAnswerComplete();\n      event.preventDefault();\n    }\n  };\n\n  handleAnswerComplete = () => {\n    this.props.handleAnswerComplete(this.state.userAnswer);\n  };\n\n  render() {\n    return (\n      <>\n        <div style={{display: \"flex\", flexDirection: \"row\", padding: \"10px\"}}>\n          <div>\n            <Countdown360\n              borderFillColor=\"#00ad00\"\n              seconds={this.props.delay}\n              onComplete={this.handleAnswerComplete}\n            />\n          </div>\n          <div>\n            <div style={{display: \"flex\", flexDirection: \"row\", padding: \"10px\"}}>\n              <TextField\n                data-testid=\"answer-input\"\n                autoFocus\n                size=\"small\"\n                value={this.state.userAnswer}\n                onChange={this.handleInputChange}\n                onKeyPress={this.handleKeyPress}\n                label=\"Введите запомненные числа\"\n                helperText=\"Введите в любой последовательности и нажмите Enter либо кнопку справа\"\n                variant=\"outlined\"\n                style={{margin: \"10px\"}}\n              />\n              <Button\n                data-testid=\"answer-complete-button\"\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={this.handleAnswerComplete}\n                style={{margin: \"10px\"}}\n              >\n                <Check/>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Answer;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport {MAIN_TAB_INDEX} from \"../App\";\nimport Statistics from \"./Statistics\";\nimport Alert from '@material-ui/lab/Alert';\n\nconst Results = ({stats, message, messageType, handleMoreButton, handleBackButton}) => {\n  return <>\n    <Alert severity={messageType}>{message}</Alert>\n    <Statistics {...stats}/>\n    <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-around\"}}>\n      <Button variant=\"contained\" color=\"secondary\" onClick={() => handleBackButton(MAIN_TAB_INDEX)}>Хватит</Button>\n      <Button variant=\"contained\" color=\"primary\" onClick={handleMoreButton}>Ещё!</Button>\n    </div>\n  </>;\n};\n\nexport default Results;\n","export function checkAnswer(correctNumbers = [], userAnswer = \"\") {\n  const userNumbers = userAnswer\n    .split(\" \")\n    .map((stringNumber => Number.parseInt(stringNumber)));\n  return correctNumbers.every(number => userNumbers.includes(number));\n}\n","import React, {Component} from \"react\";\nimport Question from \"../components/Question\";\nimport {createRandomNumbers} from \"../utils/randomNumbers\";\nimport Answer from \"../components/Answer\";\nimport Results from \"../components/Results\";\nimport {checkAnswer} from \"../utils/answers\";\n\nconst GAME_STATE_IDLE = \"idle\";\nconst GAME_STATE_QUESTION = \"question\";\nconst GAME_STATE_ANSWER = \"answer\";\n\nexport default class GameView extends Component {\n  state = {\n    gameState: GAME_STATE_IDLE,\n    numbers: [],\n    message: \"\",\n    messageType: \"success\"\n  };\n\n  componentDidMount() {\n    this.setState({\n      gameState: GAME_STATE_QUESTION,\n      numbers: createRandomNumbers(\n        this.props.settings.numbersCount,\n        this.props.settings.numbersMagnitude\n      )\n    });\n  }\n\n  handleQuestionComplete = () => {\n    this.setState({gameState: GAME_STATE_ANSWER});\n  };\n\n  handleInputChange = (event, value) => {\n    this.setState({userInput: value});\n  };\n\n  handleAnswerComplete = (userAnswer = \"\") => {\n    let message, messageType;\n    const isAnswerCorrect = checkAnswer(this.state.numbers, userAnswer);\n\n    if (isAnswerCorrect) {\n      message = \"Правильный ответ!\";\n      messageType = \"success\";\n    } else {\n      message = \"К сожалению, ответ неправильный.\";\n      messageType = \"error\";\n    }\n    this.props.handleStatisticsUpdate(isAnswerCorrect);\n\n    this.setState({\n      gameState: GAME_STATE_IDLE,\n      message,\n      messageType\n    });\n  };\n\n  handleMore = () => {\n    this.setState({\n      gameState: GAME_STATE_QUESTION,\n      numbers: createRandomNumbers(\n        this.props.settings.numbersCount,\n        this.props.settings.numbersMagnitude\n      )\n    });\n  };\n\n  render() {\n    return (\n      <>\n        {this.state.gameState === GAME_STATE_QUESTION && (\n          <Question\n            numbers={this.state.numbers}\n            delay={this.props.settings.delay}\n            handleQuestionComplete={this.handleQuestionComplete}\n          />\n        )}\n        {this.state.gameState === GAME_STATE_ANSWER && (\n          <Answer\n            delay={this.props.settings.delay}\n            handleAnswerComplete={this.handleAnswerComplete}\n          />\n        )}\n        {this.state.gameState === GAME_STATE_IDLE && (\n          <Results\n            stats={this.props.stats}\n            message={this.state.message}\n            messageType={this.state.messageType}\n            handleMoreButton={this.handleMore}\n            handleBackButton={this.props.handleTabs}\n          />\n        )}\n      </>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport './App.css';\nimport SettingsView from \"./views/SettingsView\";\nimport MainView from \"./views/MainView\";\nimport GameView from \"./views/GameView\";\n\nexport const MAIN_TAB_INDEX = 0;\nexport const GAME_TAB_INDEX = 1;\nexport const SETTINGS_TAB_INDEX = 2;\n\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nfunction a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\n/*const useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n  wrapper: {\n    width: '800px',\n    margin: '0 auto'\n  }\n}));*/\n\nclass App extends Component {\n  state = {\n    tabIndex: 0,\n    settings: {\n      numbersCount: 3,\n      numbersMagnitude: 1,\n      delay: 5\n    },\n    stats: {\n      games: 0,\n      successful: 0,\n    }\n  };\n\n  setTabIndex = (tabIndex) => {\n    this.setState({tabIndex});\n  };\n\n  handleTabIndexChange = (event, newValue) => {\n    this.setTabIndex(newValue);\n  };\n\n  handleSettingsChange = (name, value) => {\n    this.setState({settings: {...this.state.settings, [name]: value}});\n  };\n\n  handleStatisticsUpdate = (result) => {\n    const newStats = {...this.state.stats};\n    if (result) {\n      newStats.successful += 1;\n    }\n    newStats.games += 1;\n    this.setState({\n      stats: newStats\n    });\n  };\n\n  render() {\n    //const classes = useStyles();\n    return (\n      <div className=\"tabs-wrapper\">\n        <div className=\"tabs-root\">\n          <AppBar position=\"static\">\n            <Tabs value={this.state.tabIndex} onChange={this.handleTabIndexChange} aria-label=\"simple tabs example\">\n              <Tab label=\"Главная\" {...a11yProps(MAIN_TAB_INDEX)} />\n              <Tab label=\"Игра\" {...a11yProps(GAME_TAB_INDEX)} />\n              <Tab label=\"Настройки\" {...a11yProps(SETTINGS_TAB_INDEX)} />\n            </Tabs>\n          </AppBar>\n          <TabPanel value={this.state.tabIndex} index={MAIN_TAB_INDEX}>\n            <MainView\n              stats={this.state.stats}\n              handleTabs={this.setTabIndex}\n            />\n          </TabPanel>\n          <TabPanel value={this.state.tabIndex} index={GAME_TAB_INDEX}>\n            <GameView\n              stats={this.state.stats}\n              settings={this.state.settings}\n              handleTabs={this.setTabIndex}\n              handleStatisticsUpdate={this.handleStatisticsUpdate}\n            />\n          </TabPanel>\n          <TabPanel value={this.state.tabIndex} index={SETTINGS_TAB_INDEX}>\n            <SettingsView\n              handleTabs={this.setTabIndex}\n              handleSettingsChange={this.handleSettingsChange}\n              settings={this.state.settings}\n            />\n          </TabPanel>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}